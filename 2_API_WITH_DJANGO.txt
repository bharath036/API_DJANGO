Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass --> To activate bypass policy
pip freeze --> To see what packages installed
superuser --> kalakoti/password

We had setup python environment and installed django --> pip install django 

#MODELS AND MIGRATIONS 


class Movie(models.Model):
    name = models.CharField(max_length=50)
    description = models.CharField(max_length=200)
    active = models.BooleanField(default=True)
    
    def __str__(self):
        return self.name 

Then we registered in admin.py this model 
from django.contrib import admin
from watchlist_app.models import Movie


# Register your models here.
admin.site.register(Movie)

Then after this we need to import models to views and proceed 
We are sending request and printing console using views


def movie_list(request):
    
    #We will get all movies in movie table
    movies = Movie.objects.all()
    #We can't return them directly, we need to return in json format
    print(movies)

OUTPUT: <QuerySet [<Movie: Kingkong>]>

print(movies.values()) --> it returns dict or tuple  but we need to return response in JSON format

Like this we get response see below in dictionary format 
<QuerySet [{'id': 1, 'name': 'Kingkong', 'description': 'Description1', 'active': True}]>

list(movies.values())


#######################################################################################################
Creating JSON RESPONSE - ALL ELEMENTS 

from django.shortcuts import render
from watchlist_app.models import * 
from django.http import JsonResponse 

# Create your views here.

def movie_list(request):
    
    #We will get all movies in movie table
    movies = Movie.objects.all()
    #We can't return them directly, we need to return in json format
    #print(movies.values())
    data = {
        'movies' : list(movies.values())
    }
    
    return JsonResponse(data)

After this if we open http://127.0.0.1:8000/movie/list/ --> we will see the data in json format 

Suppose if we see json format it will be in double quoted " ", here in models we kept default as True but if we
see in json format it will be small t , true 

Current we returned all the records present .., in next we will see single movie like that 

----------------------------------------------------------------------------------------------------------------------------

#Creating JSON response - Individual ELements 

If we want to access 1st object or any one individual object


#Lets extract info for particular object, for this we need to write url for it specific object
def movie_details(request,pk): #pk is id or any id for particualr object or record, url looks like this http://127.0.0.8000/movie/1 --> 1 is pk that can be changed
    movie = Movie.objects.get(pk=pk)
    #print(movie)
    data = {
        'name': movie.name,
        'description' : movie.description,
        'active':movie.active
    }
    return JsonResponse(data)
    
If we do each every element manually like this if we hard .., for this we use Django REST framework 
CRUD --> If we do separately we may make mistakes 
Install DRF --> Django Rest Framework 

The above is one of the method accessing API's 
We seen how to create API response directly from django in above lecture or class

The problem here is..,If we want to accept form request we need to get json from front end and store in database separately which needs lots of manual work
--> See below source code till we learnt till now 

https://github.com/ShubhamSarda/MovieListAPI-Django/blob/main/watchlist_app/views.py

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def movie_list(request):
    
    #We will get all movies in movie table
    movies = Movie.objects.all()
    #We can't return them directly, we need to return in json format
    #print(movies.values())
    data = {
        'movies' : list(movies.values())
    }
    
    return JsonResponse(data)

#Lets extract info for particular object, for this we need to write url for it specific object
def movie_details(request,pk): #pk is id or any id for particualr object or record, url looks like this http://127.0.0.8000/movie/1 --> 1 is pk that can be changed
    movie = Movie.objects.get(pk=pk)
    #print(movie)
    data = {
        'name': movie.name,
        'description' : movie.description,
        'active':movie.active
    }
    return JsonResponse(data)
    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DJANGO REST FRAMEWORK 

For notes or brief about this DRF --> www.django-rest-framework.org 

--> Then add rest_framework in installed Apps 

------------------------------------------------------------------------------------------------------------------------------
Serializers and Deserializers 


The data that we store in database like here we created Movie table in that we are storing records in objects form as well we can say 

See the above procees known as serialization 
Complex Datatype                      | Python Native Datatype |
--------------------------------------------------------------------------------------------------------------- 
Model objects -------------------------> Python Dictionary ------------------------------------> JSON DATA 
    |              serialization                                    Render into json 
    |
    |
    v 
movies = Movie.objects.all()

Mapping will be done by serialization and than we have to render it 
If we want to deliver information to user., we are serializing it.
Deserialization is opposite to it --> if we want to get data from user and need to store it in database known as Deserialization

JSON Data -------------> Python Native Datatype ----------------------> Complex Datatype
            Parse Data                              De-Serialization

    
In DRF --> document we can see the info about different concepts in Tutorial 

Type of Serialzers  --> Serialization,ModelSerializer

Types of views --> Class based views --> here we use API_view inherit it , Function Based views --> here we use @api_view  

Working with API's --> How to access API's --> DRF Browsable API ,Postman(most companies use it), HTTPie(mostly not recommandable as we need to deal them in cmd, terminal mostly)

Function Based views --> @api_view()

Class Based Views --> APIView --> Generic views, Mixins, Concrete View Classes, ViewSets 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Understanding APIs and Django REST Framework

## What is an API?
An **API (Application Programming Interface)** acts as a middleman, enabling communication between two applications or systems.

### Examples:
- **Uber & Google Maps:** Uber uses Google Maps API for location services.
- **Restaurant Analogy:**
  - **Client:** You
  - **API:** Waiter
  - **Server:** Kitchen

## Types of APIs
| Type      | Description                                              | Example                         |
|-----------|----------------------------------------------------------|---------------------------------|
| Private   | Used within an organization                              | Internal APIs                   |
| Partner   | Shared between business partners                         | Uber using Google Maps API      |
| Public    | Open to external developers                              | OpenWeather, CoinMarketCap API  |

## Why Use APIs?
- Reuse backend across platforms.
- Integrate third-party services.
- Avoid redundant database setups.

## Data Formats
- **JSON** (Preferred)
- **XML**

## URL Structure in APIs
Example:
```
https://api.movielist.com/movies/           # List all movies
https://api.movielist.com/movies/127/       # Specific movie details
https://api.movielist.com/movies/127/reviews/?limit=20  # Limited reviews
```
- **Base URL:** `https://api.movielist.com`
- **Endpoint:** `/movies/127/reviews/`
- **Query Params:** `?limit=20`

---

# REST API (Representational State Transfer)
REST is an architectural style with rules for designing scalable APIs.

## Key REST Principles
1. **Endpoints**
2. **HTTP Methods (CRUD):**
   - GET, POST, PUT/PATCH, DELETE
3. **Headers & Status Codes** (`200 OK`, `404 Not Found`)
4. **Data Format:** JSON

---

# Django API Development

## Basic API without DRF
Example `views.py`:
```python
from django.http import JsonResponse
from .models import Movie

def movie_list(request):
    movies = Movie.objects.all()
    data = {'movies': list(movies.values())}
    return JsonResponse(data)

def movie_details(request, pk):
    movie = Movie.objects.get(pk=pk)
    data = {
        'name': movie.name,
        'description': movie.description,
        'active': movie.active
    }
    return JsonResponse(data)
```

## Limitations:
- Manual JSON handling.
- No built-in validation.

---

# Django REST Framework (DRF)
- Simplifies API creation.
- Provides serialization, authentication, and browsable APIs.

## Setup
```bash
pip install djangorestframework
```
Add `'rest_framework'` to `INSTALLED_APPS`.

## Serialization
| Process         | Description                                    |
|-----------------|------------------------------------------------|
| Serialization   | Model ➜ Python Dict ➜ JSON                    |
| Deserialization | JSON ➜ Python Dict ➜ Model                    |

## Example Serializer
```python
from rest_framework import serializers
from .models import Movie

class MovieSerializer(serializers.ModelSerializer):
    class Meta:
        model = Movie
        fields = '__all__'
```

## Function-Based View Example
```python
from rest_framework.decorators import api_view
from rest_framework.response import Response

@api_view(['GET'])
def movie_list(request):
    movies = Movie.objects.all()
    serializer = MovieSerializer(movies, many=True)
    return Response(serializer.data)
```

---

# API Testing Tools
- **DRF Browsable API**
- **Postman**
- **HTTPie**

---

# Advanced DRF Concepts
- Generic Views & Mixins
- ViewSets & Routers
- Authentication (Token, JWT)
- Pagination & Filtering
- API Versioning

---

For detailed documentation, visit: [Django REST Framework](https://www.django-rest-framework.org/)
------------------------------------------------------------------------------------------------------------------------------------------------

# Django REST Framework - Understanding Serializers

## What is a Serializer?
A **serializer** in Django REST Framework (DRF) converts complex data types (like Django models) into JSON format for APIs, and vice versa.

### Why Do We Need Serializers?
- To translate database objects into a format (JSON) that web/mobile apps can understand.
- To validate and process incoming data before saving it to the database.

---

## Real-Life Analogy
**Waiter = Serializer**
- Translates your request to the kitchen (database) and brings back your order in a way you understand.

---

## Serialization vs Deserialization
| Process           | Purpose                                      |
|-------------------|----------------------------------------------|
| **Serialization** | Convert Django Model ➔ JSON                  |
| **Deserialization** | Convert JSON ➔ Validate ➔ Django Model     |

---

## Complete Example: Movie API

### 1. models.py
```python
from django.db import models

class Movie(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    rating = models.FloatField()

    def __str__(self):
        return self.name
```

### 2. serializers.py
```python
from rest_framework import serializers
from .models import Movie

class MovieSerializer(serializers.ModelSerializer):
    class Meta:
        model = Movie
        fields = '__all__'
```

### 3. views.py
```python
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Movie
from .serializers import MovieSerializer

@api_view(['GET', 'POST'])
def movie_list(request):
    if request.method == 'GET':
        movies = Movie.objects.all()
        serializer = MovieSerializer(movies, many=True)
        return Response(serializer.data)

    if request.method == 'POST':
        serializer = MovieSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)
```

### 4. urls.py
```python
from django.urls import path
from . import views

urlpatterns = [
    path('movies/', views.movie_list, name='movie-list'),
]
```

---

## Testing the API
- **GET** ➔ `http://127.0.0.1:8000/movies/`
- **POST** ➔ Send JSON:
```json
{
  "name": "Interstellar",
  "description": "Sci-fi exploration of space and time.",
  "rating": 9.0
}
```

---

## Custom Validation Example
```python
class MovieSerializer(serializers.ModelSerializer):
    class Meta:
        model = Movie
        fields = '__all__'

    def validate_rating(self, value):
        if value > 10 or value < 0:
            raise serializers.ValidationError("Rating must be between 0 and 10.")
        return value
```

---

## Tools for API Testing
- **Postman**
- **DRF Browsable API**

---

For more info, visit: [Django REST Framework Docs](https://www.django-rest-framework.org/)
